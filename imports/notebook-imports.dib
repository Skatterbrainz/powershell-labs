#!markdown

# Importing Data

#!markdown

2022-October : David Stein : @skatterbrainzz : skatterbrainz.wordpress.com

#!markdown

## Overview

#!markdown

* Multiple ways to bring data into PowerShell for processing
* Small quantity inputs = Direct/manual input
* Larger quantities = Batch input
* Batch inputs = audit trail, input record
* Examples:
  * Querying information from 2 or 3 machines
  * Querying information from 10,000 machines

#!markdown

Situations which involve processing large numbers of input values are often challenging to enter manually. Even when populating a list of values manually, it can be a challenge. PowerShell can help with retrieving a list of values from nearly unlimited types of sources. Common examples are listed below.

#!markdown

* Direct entry (array, arraylist, generic list, etc.)
* File import (txt, csv, xlsx, xml, json, etc.)
* Database query results (SQL)
* Active Directory query (LDAP, ADSI)
* Web content (REST, HTML, etc.)

#!markdown

Each of these examples (above) could potentially provide a list of values to be fed into other processes. For example, a list of user accounts, devices, employee records and so on. The list could consist of simple value types like strings or numbers, or could be objects. What you decide to extract from a data source will depend on what you need to do with the data afterwards. If you only need device names, then you can speed up the import process by only requesting the device names.

#!markdown

### Reading a Text File

#!markdown

This method imports data from an ASCII text file, where each value is separated on its own line (line feed). Refer to "computers.txt" sample file in this same path for what the expected format would look like.

#!pwsh

$filename = ".\computers.txt"
$computerNames = Get-Content -Path $filename

#!markdown

### Reading a CSV file

#!markdown

This method imports from a CSV, or comma-separated value, format file. The file extension .csv is most commonly used, but the Import-Csv cmdlet doesn't really care what the filename or extension are.  Refer to "computers.csv" for an example of this type of format.  Also, as long as there exists a column named "Name", any other (or no other) columns matter. You could use a file with only one column, or 100 columns. The example below will only look for values under the "Name" column.

#!pwsh

$filename = ".\computers.csv"
$computerNames = Import-Csv -Path $filename | Select-Object -ExpandProperty Name

#!markdown

### Reading a Tab-delimited file

#!markdown

This method is nearly identical to importing from CSV files. The only difference is what character is used to delimit each column for each row. In this case, a Tab character is used.  You can easily substitue other characters to accommodate different file formats, for example a semi-colon ";". Other than that, it works the same as importing CSV data.

#!pwsh

$filename = ".\computers.tsv" # extension really doesn't matter
$computerNames = Import-Csv -Path $filename -Delimiter "`t" | Select-Object -ExpandProperty Name

#!markdown

### Reading from a SQL Databse query

#!pwsh

if (Get-Module dbatools -ListAvailable) {
	$computerNames = Invoke-DbaQuery -SqlInstance "db1.contoso.local" -Database "Inventory" -Query "select devicename from devices order by devicename"
}

#!pwsh

# splatted version

if (Get-Module dbatools -ListAvailable) {
	$params = @{
		SqlInstance = "db1.contoso.local"
		Database = "Inventory"
		Query = "select devicename from devices order by devicename"
	}
	$computerNames = Invoke-DbaQuery @params
}

#!markdown

### Reading from an Active Directory Domain

#!pwsh

if (Get-Module ActiveDirectory -ListAvailable) {
	$computerNames = Get-ADComputer -Filter * | Sort-Object Name | Select-Object -ExpandProperty Name
}

#!markdown

### Reading from Azure AD

#!pwsh

if (Get-Module AzureAd -ListAvailable) {
	if (!$azconn) { $azconn = Connect-AzureAd }
	$computerNames = Get-AzureAdDevice -Filter "DeviceOSType -eq 'Windows'" | Select-Object -ExpandProperty DeviceName
}

#!markdown

### Reading from Azure

#!pwsh

if (Get-Module Az.Compute) {
	if (Get-AzContext) {
		$computerNames = Get-AzVm -Location centralus | Select-Object -ExpandProperty Name
	}
}

#!markdown

### REST API endpoint

#!pwsh

$response = Invoke-RestMethod -Method Get -UseBasicParsing -Uri 'https://datausa.io/api/data?drilldowns=Nation&measures=Population'
$response.data

# Microsoft Graph
Connect-MgGraph -Scopes "User.Read.All"
$computerNames = Get-MgDevice -Filter ""

#!markdown

## Examples

#!pwsh

$computerNames | Foreach-Object {
	$params = @{
		Server = $_
		Start = "03/13/2022 09:00:00"
		End = "03/25/2022 17:00:00"
		MessageSubject = "Project MK-Ultra"
		ResultSize = 'Unlimited'
	}
	$logs = Get-MessageTrackingLog @params
}
