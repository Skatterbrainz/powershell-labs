#!markdown

# PowerShell Performance

#!markdown

Heavily inspired by the MMS session by Scott Corio and Nathan Ziehnert

#!markdown

### Evaluated Condition Tests

#!markdown

#### If / ElseIf

#!pwsh

[hashtable]$obj = @{FN = 'David'; LN = 'Stein'; Dept = 'Consulting'}

Measure-Command {
	for ($i = 0; $i -lt 10000; $i++) {
		if ($obj.FN -like 'John*' -and $obj.Dept -eq 'Marketing') {
			$x = 1
		} elseif ($obj.FN -like 'Beth*' -or $obj.Dept -eq 'Support') {
			$x = 2
		} elseif ($obj.FN -like 'Dav*' -and $obj.Dept -eq 'Consulting') {
			$x = 3
		} else {
			$x = 4
		}
	}
} | Select-Object -ExpandProperty TotalMilliseconds

#!markdown

#### Switch

#!pwsh

[hashtable]$obj = @{FN = 'David'; LN = 'Stein'; Dept = 'Consulting'}

Measure-Command -Expression {
	for ($i = 0; $i -lt 10000; $i++) {
		switch ($obj) {
			{($obj.FN -like 'John*' -and $obj.Dept -eq 'Marketing')} { $x = 1 }
			{($obj.FN -like 'Beth*' -or $obj.Dept -eq 'Support')} { $x = 2 }
			{($obj.FN -like 'Dav*' -and $obj.Dept -eq 'Consulting')} { $x = 3 }
			default { $x = 4 }
		}
	}
} | Select-Object -ExpandProperty TotalMilliseconds

#!markdown

### Arrays and Lists

#!markdown

#### Array Union

#!pwsh

using namespace System.Collections
using namespace System.Collections.Generic
using namespace System.Collections.Concurrent

$randoms = Get-Random -Count 100000
$list = [List[int]]::new()

Measure-Command {
	$randoms | ForEach-Object { $list.Add($_) }
	$list.Sort()
} | Select-Object -ExpandProperty TotalMilliseconds

#!markdown

#### Foreach-Object Parallel

#!pwsh

Measure-Command {
	1..1000 | ForEach-Object -Parallel {
		$_ * 2
	} -ThrottleLimit 5
} | Select-Object -ExpandProperty TotalMilliseconds

#!pwsh

using namespace System.Collections
using namespace System.Collections.Generic
using namespace System.Collections.Concurrent

$a = [ConcurrentQueue[int]]::new()
1..100000 | ForEach-Object { $a.Enqueue($_) }
$a.Count

#!pwsh

using namespace System.Collections
using namespace System.Collections.Generic
using namespace System.Collections.Concurrent

$a = [ConcurrentQueue[int]]::new()
1..100000 | ForEach-Object { $a.Enqueue($_) }

Measure-Command {
	1..5 | ForEach-Object {
		Start-ThreadJob {
			$i = $null
			while ($args[0].TryPeek([ref]$i)) {
				if ($args[0].TryDequeue([ref]$i)) {
					$i * 2
				}
			}
		} -ArgumentList $a
	} | Wait-Job | Receive-Job
} | Select-Object -ExpandProperty TotalMilliseconds

#!markdown

### XML Elements and Attributes

#!pwsh

$xml = @'
<?xml version="1.0" encoding="UTF-8"?>
<employees>
	<employee>
		<firstname>Joe</firstname>
		<lastname>Smith</lastname>
		<empid>1001</empid>
		<title>Sr. Consultant</title>
		<dept>Data AI</dept>
		<hiredate>02/05/2018</hiredate>
	</employee>
</employees>
'@

#!pwsh

$emps = [xml]$xml
$emps.employees.employee

#!pwsh

$newemp = $emps.CreateElement("employee")
$null = $emps.employees.AppendChild($newemp)

$newemp.SetAttribute("firstname","Kathy")
$newemp.SetAttribute("lastname","Jones")
$newemp.SetAttribute("empid","1003")
$newemp.SetAttribute("title","Dept Manager")
$newemp.SetAttribute("dept","Human Resources")
$newemp.SetAttribute("hiredate","04/22/2015")

$emps.employees.employee
