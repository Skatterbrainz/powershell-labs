#!meta

{"kernelInfo":{"defaultKernelName":null,"items":[{"name":"csharp","languageName":"C#","aliases":["c#","cs"]},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"html","languageName":"HTML"},{"name":"sql","languageName":"SQL"},{"name":"kql","languageName":"KQL"},{"name":"mermaid","languageName":"Mermaid"},{"name":"httpRequest","languageName":"http"},{"name":"value"}]}}

#!markdown

# Date and Time

#!markdown

### Getting a Date

#!markdown

Compare the performance of using Get-Date vs. the [datetime] class

#!pwsh

Measure-Command {
	for ($i = 0; $i -lt 10000; $i++) {
		$x = (Get-Date "2022-04-05")
	}
} | Select-Object -ExpandProperty TotalMilliseconds

Measure-Command {
	for ($i = 0; $i -lt 10000; $i++) {
		$x = [datetime]"2022-04-05"
	}
} | Select-Object -ExpandProperty TotalMilliseconds

#!markdown

### Datetime Arithmetic

#!markdown

#### Compare performance of comparing dates using New-TimeSpan and the .AddDays() method

#!markdown

* Example 1 = Get TimeSpan (delta) between a past date and today
* Example 2 = Add 90 days to a past date and check if it's in the future

#!pwsh

$datevalue = "8/1/2022"

# EXAMPLE 1

Measure-Command {
	for ($i = 0; $i -lt 10000; $i++) {
		(New-TimeSpan -Start (Get-Date $datevalue) -End (Get-Date)).Days -gt 90
	}
} | Select-Object -ExpandProperty TotalMilliseconds

# EXAMPLE 2

Measure-Command {
	for ($i = 0; $i -lt 10000; $i++) {
		(Get-Date $datevalue).AddDays(90) -gt (Get-Date)
	}
} | Select-Object -ExpandProperty TotalMilliseconds
