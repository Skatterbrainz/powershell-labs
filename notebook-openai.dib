#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"name":"csharp","languageName":"C#","aliases":["c#","C#"]},{"name":"vscode","aliases":["frontend"],"languageName":null},{"name":".NET","aliases":[],"languageName":null},{"name":"fsharp","languageName":"F#","aliases":["f#","F#"]},{"name":"html","languageName":"HTML","aliases":[]},{"name":"kql","languageName":"KQL","aliases":[]},{"name":"mermaid","languageName":"Mermaid","aliases":[]},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"sql","languageName":"SQL","aliases":[]},{"name":"value","aliases":[],"languageName":null}]}}

#!markdown

# OpenAI with PowerShellAI module

#!markdown

### Preparation

#!markdown

* Create an OpenAI Account
  * Read Pricing information: https://openai.com/api/pricing/
  * Review and try examples: https://platform.openai.com/examples
  * Create an API key (copy to clipboard)
* Store API key in a safe place (key vault, etc.)
* Import into environment variable "OpenAIKey" ($env:OpenAIKey)
* Install-Module PowerShellAI

#!markdown

### PowerShellAI setup

#!markdown

##### Import the module

#!pwsh

if (!(Get-Module PowerShellAI -ListAvailable)) {
	Write-Output "Install-Module PowerShellAI"
} else {
	Update-Module PowerShellAI
	Write-Output "Module is updated"
}

#!markdown

#### Define the OpenAIKey environment variable ($env:OpenAIKey)

#!pwsh

$env:OpenAIKey = "" # paste API key and run

#!markdown

Get commit description by asking OpenAI to analyze the git changes

#!pwsh

cd "c:\git\powershell-labs"
git stage --all
git status | ai "write me a detailed commit message for the staged changes in this repo"

#!markdown

Stage and Commit changes with AI-generated commit message

#!pwsh

cd "c:\git\azurelabs"
git stage --all
git status | ai "write me a detailed commit message for the staged changes in this repo" | % { git commit -m "$($_)" }

#!markdown

### Examples - Moderation API

#!markdown

* Definition: Given a input text, outputs if the model classifies it as violating OpenAI's content policy.
* Reference: https://platform.openai.com/docs/api-reference/moderations

#!pwsh

Get-OpenAIModeration "I hate red cars"

#!pwsh

Get-OpenAIModeration "I want to destroy red cars."

#!pwsh

Get-OpenAIModeration "I want to destroy them."

#!pwsh

Get-OpenAIModeration "I want to smash it with a hammer!"

#!pwsh

Get-OpenAIModeration "I want to smash them with a hammer!"

#!pwsh

Get-OpenAIModeration "I want to destroy them." | foreach { $_.psobject.properties | where {$_.Value -eq $true} | select name }

#!markdown

### Examples - Edits API

#!markdown

* Definition: Given a prompt and an instruction, the model will return an edited version of the prompt
* Reference: https://platform.openai.com/docs/api-reference/edits

#!pwsh

ai "show the regex too vlidate email user"

#!pwsh

Get-OpenAIEdit "powershell code get tp 5 us states wth most people with 2020 population n their capitals in json" -Instruction "fix the spelling mistakes"

#!pwsh

Get-OpenAIEdit "powershell code get tp 5 us states wth most people with 2020 population n their capitals in json" -Instruction "fix the spelling mistakes" -edits 3

#!pwsh

ai "use powershell regex, validate text as being a valid email address"

#!pwsh

ai "powershell code get the top 5 us states with most people with 2020 population"

#!pwsh

ai "powershell code get the top 5 us states with most people with 2020 population" -max_tokens 2000

#!markdown

#### Test Output

#!pwsh

"mickey.mouse@disney.com" -match '^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
"mickey.mouse@disneycom" -match '^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'

#!pwsh

ai "use powershell regex, validate text as being a valid email address"
