#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"name":"csharp","languageName":"C#","aliases":["c#","C#"]},{"name":"vscode","aliases":["frontend"],"languageName":null},{"name":".NET","aliases":[],"languageName":null},{"name":"fsharp","languageName":"F#","aliases":["f#","F#"]},{"name":"html","languageName":"HTML","aliases":[]},{"name":"kql","languageName":"KQL","aliases":[]},{"name":"mermaid","languageName":"Mermaid","aliases":[]},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"sql","languageName":"SQL","aliases":[]},{"name":"value","aliases":[],"languageName":null}]}}

#!markdown

# OpenAI with PowerShell

#!markdown

### Overview

#!markdown

* What is OpenAI? ChatGPT?
* OpenAI vs. ChatGPT / InstructGPT
  * LLM = Large Language Model (2019, 2021)
  * Subscription / Pricing / Tokens / Orgs / Budgets
* REST API
  * GPT-3, Codex, DALL-E
  * Models: ada, babbage, curie, davinci
  * Completions
  * Moderations
  * Edits
  * Fine-Tuning
  * Embeddings
  * more...

#!markdown

### Preparation

#!markdown

* Create an OpenAI Account
  * Read Pricing information: https://openai.com/api/pricing/
  * Review and try examples: https://platform.openai.com/examples
  * Create an API key (copy to clipboard)
* Store API key in a safe place (key vault, etc.)
* Import into environment variable "OpenAIKey" ($env:OpenAIKey)
* Install-Module PowerShellAI

#!markdown

### Using the API

#!markdown

Using CURL

#!pwsh

curl https://api.openai.com/v1/completions `
	-H 'Content-Type: application/json' `
	-H "Authorization: Bearer $($env:OpenAIKey)" `
	-d '{
		"model": "text-davinci-003",
		"prompt": "List the 3 most populated US states with population, and abbreviation, output as a markdown table",
		"max_tokens": 1000,
		"temperature": 0
	}'

#!markdown

Using Python 3

#!value

# python
import os
import openai
openai.api_key = open('pykey.txt').read()
# openai.api_key = os.getenv('OpenAIKey')

question = "List the 3 most populated US states with population, and abbreviation, output in json format"
aimodel = "text-davinci-003"

os.system('cls')
print('Submitting request to openai...')
response = openai.Completion.create(model=aimodel,prompt=question,temperature=0,max_tokens=1000)
print(response.choices[0].text)

#!markdown

Invoke Script (Example)

#!value

# python
import os
os.chdir('C:\\git\\powershell-labs')
os.system('cls')
exec(open('openaisample.py').read())

#!markdown

Using PowerShell

#!pwsh

$headers = @{
	'Content-Type'='application/json';
	'Authorization'="Bearer $($env:OpenAIKey)"
}

$body = @{
	"model" = "text-davinci-003"
	"prompt" = "List the 3 most populated US states with population, and abbreviation, output in XML"
	"max_tokens" = 1000
	"temperature" = 0
} | ConvertTo-Json

Invoke-RestMethod -Uri 'https://api.openai.com/v1/completions' -Headers $headers -Method POST -Body $body

#!pwsh

$response = Invoke-RestMethod -Uri 'https://api.openai.com/v1/completions' -Headers $headers -Method POST -Body $body
$response.choices | % { $_.text }

#!pwsh

$body = @{
	"model" = "text-curie-001"
	"prompt" = "Translate to Spanish: I really love my job!"
	"max_tokens" = 10
	"temperature" = 0
} | ConvertTo-Json
$response = Invoke-RestMethod -Uri 'https://api.openai.com/v1/completions' -Headers $headers -Method POST -Body $body
$response.choices | % { $_.text }

#!markdown

### PowerShellAI

#!markdown

* PowerShell Module written by Doug Finke (author of "ImportExcel") YouTube/GitHub: @DougFinke
* Provides a similar capability to the Python wrapper for the OpenAI API
* Install-Module PowerShellAI
* Uses an environment variable to store the API key ("OpenAIKey")

#!markdown

#### Completions

#!pwsh

Get-GPT3Completion -Prompt "If it is 9:45 PM in Virginia right now, what time is it in Seattle?"

#!pwsh

ai "If John is 42 years old, Bob is 40 years old, and Ray is older than Bob but younger than John, how old is Ray?"

#!pwsh

$text = @"
Write the comment help for the following powershell function:

function Get-DeptName {
	param (
		[parameter(Mandatory)][int]$DeptID,
		[parameter()][string]$SqlInstance = "sql001.contoso.local",
		[parameter()][string]$Database = "orginfo"
	)
	Invoke-DbaQuery -SqlInstance $SqlInstance -Database $Database -Query "select name from dept where id=$DeptID"
}
"@

ai $text

#!markdown

Leverage PowerShellAI and ImportExcel modules

#!pwsh

ai "last 5 states to join the nation, with their abbreviations and the year they joined, as a markdown table" |
	ConvertFrom-GPTMarkdownTable | Export-Excel -Show

#!markdown

Get commit description by asking OpenAI to analyze the git changes

#!pwsh

cd "c:\git\powershell-labs"
git stage --all
git status | ai "write me a detailed commit message for the staged changes in this repo"

#!markdown

Stage and Commit changes with AI-generated commit message

#!pwsh

cd "c:\git\azurelabs"
git stage --all
git status | ai "write me a detailed commit message for the staged changes in this repo" | % { git commit -m "$($_)" }
git push

#!markdown

#### Moderations

#!markdown

* Definition: Given a input text, outputs if the model classifies it as violating OpenAI's content policy.
* 7 deadly categories: sexual, hate, violence, self-harm, sexual/minors, hate/threatening, violence/graphic
* Supported models: text-moderation-stable, text-moderation-latest
* Reference: https://platform.openai.com/docs/api-reference/moderations

#!pwsh

Get-OpenAIModeration "I hate McAfee antivirus"

#!pwsh

Get-OpenAIModeration "I want to destroy McAfee antivirus." | foreach {
	$_.psobject.properties | where {$_.Value -eq $true} | select name
}

#!pwsh

Get-OpenAIModeration "I want to destroy them." | foreach {
	$_.psobject.properties | where {$_.Value -eq $true} | select name
}

#!pwsh

Get-OpenAIModeration "I want to smash it with a hammer!" | foreach {
	$_.psobject.properties | where {$_.Value -eq $true} | select name
}

#!pwsh

Get-OpenAIModeration "I want to smash them with a hammer!" | foreach {
	$_.psobject.properties | where {$_.Value -eq $true} | select name
}

#!pwsh

Get-OpenAIModeration "I want to destroy them." | foreach { $_.psobject.properties | where {$_.Value -eq $true} | select name }

#!markdown

#### Edits

#!markdown

* Definition: Given a prompt and an instruction, the model will return an edited version of the prompt
* Supported models: text-davinci-edit-001 or code-davinci-edit-001
* Reference: https://platform.openai.com/docs/api-reference/edits

#!pwsh

Get-OpenAIEdit "Nams of first thre presidents of the US" -Instruction "fix the spelling mistakes"

#!markdown

### More

#!pwsh

gpt "write a powershell function to return the intersection elements of two arrays"

#!pwsh

ai "last 5 states to join the nation, with their abbreviations and the year they joined"

#!pwsh

ai "last 5 states to join the nation, with their abbreviations and the year they joined, as a markdown table"

#!pwsh

ai "last 5 states to join the nation, with their abbreviations and the year they joined, as a markdown table" | ConvertFrom-GPTMarkdownTable

#!markdown

### Doug's Examples (NYPSUG)

#!pwsh

$p = '
For SQL create a customer table with the following columns:
id
First Name
Last Name
City
State
Postal
Country
WorkPhone
'
Get-GPT3Completion $p

#!pwsh

Get-GPT3Completion 'If cell A1 is less than 10 show "yes" otherwise show "no"'

#!pwsh

ai "write a function name 'FizzBuzz' that prints the numbers from 1 to 16, using PowerShell"
